=====================================================
FOUNDERRANK PROJECT STATUS GUIDE
=====================================================

CURRENT PROJECT STATE:
=====================

✅ WHAT'S WORKING:
- React Native/Expo app is set up and functional
- All UI components are created and working
- Supabase credentials are configured in constants/index.js
- All service files are restored to use real Supabase
- App can start and run without errors

❌ WHAT'S NOT WORKING:
- Database tables don't exist yet
- Authentication won't work without database
- Posts, comments, votes won't save
- Real-time features won't function

🔍 ROOT CAUSE:
The SQL scripts we created have syntax compatibility issues with your Supabase PostgreSQL version.

=====================================================
STEP-BY-STEP SOLUTION
=====================================================

STEP 1: VERIFY YOUR SUPABASE PROJECT
====================================
1. Go to: https://supabase.com
2. Sign in to your account
3. Open your project: https://ppctlownnzfnngqlmrmd.supabase.co
4. Go to "SQL Editor" in the left sidebar

STEP 2: CHECK POSTGRESQL VERSION
=================================
1. In SQL Editor, run this simple command:
   SELECT version();

2. Note the version number (e.g., PostgreSQL 13.x, 14.x, 15.x)

STEP 3: CREATE DATABASE MANUALLY (RECOMMENDED)
==============================================
Instead of running complex scripts, let's create tables one by one:

1. First, create the users table:
   ```sql
   CREATE TABLE IF NOT EXISTS "public"."users" (
       "id" uuid DEFAULT gen_random_uuid() NOT NULL,
       "email" text NOT NULL,
       "name" text NOT NULL,
       "avatar_url" text,
       "bio" text,
       "website" text,
       "location" text,
       "created_at" timestamp with time zone DEFAULT now() NOT NULL,
       "updated_at" timestamp with time zone DEFAULT now() NOT NULL,
       "is_admin" boolean DEFAULT false NOT NULL,
       "is_verified" boolean DEFAULT false NOT NULL,
       "points" integer DEFAULT 0 NOT NULL,
       "rank" text DEFAULT 'Founder' NOT NULL,
       CONSTRAINT "users_pkey" PRIMARY KEY ("id")
   );
   ```

2. Create posts table:
   ```sql
   CREATE TABLE IF NOT EXISTS "public"."posts" (
       "id" uuid DEFAULT gen_random_uuid() NOT NULL,
       "user_id" uuid NOT NULL,
       "title" text NOT NULL,
       "content" text NOT NULL,
       "media_urls" text[],
       "media_type" text,
       "upvotes" integer DEFAULT 0 NOT NULL,
       "downvotes" integer DEFAULT 0 NOT NULL,
       "score" integer DEFAULT 0 NOT NULL,
       "is_flagged" boolean DEFAULT false NOT NULL,
       "created_at" timestamp with time zone DEFAULT now() NOT NULL,
       "updated_at" timestamp with time zone DEFAULT now() NOT NULL,
       CONSTRAINT "posts_pkey" PRIMARY KEY ("id"),
       CONSTRAINT "posts_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE
   );
   ```

3. Create comments table:
   ```sql
   CREATE TABLE IF NOT EXISTS "public"."comments" (
       "id" uuid DEFAULT gen_random_uuid() NOT NULL,
       "post_id" uuid NOT NULL,
       "user_id" uuid NOT NULL,
       "content" text NOT NULL,
       "parent_id" uuid,
       "upvotes" integer DEFAULT 0 NOT NULL,
       "downvotes" integer DEFAULT 0 NOT NULL,
       "score" integer DEFAULT 0 NOT NULL,
       "created_at" timestamp with time zone DEFAULT now() NOT NULL,
       "updated_at" timestamp with time zone DEFAULT now() NOT NULL,
       CONSTRAINT "comments_pkey" PRIMARY KEY ("id"),
       CONSTRAINT "comments_post_id_fkey" FOREIGN KEY ("post_id") REFERENCES "public"."posts"("id") ON DELETE CASCADE,
       CONSTRAINT "comments_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE
   );
   ```

4. Create votes table:
   ```sql
   CREATE TABLE IF NOT EXISTS "public"."votes" (
       "id" uuid DEFAULT gen_random_uuid() NOT NULL,
       "user_id" uuid NOT NULL,
       "post_id" uuid,
       "comment_id" uuid,
       "vote_type" text NOT NULL CHECK (vote_type IN ('upvote', 'downvote')),
       "created_at" timestamp with time zone DEFAULT now() NOT NULL,
       "updated_at" timestamp with time zone DEFAULT now() NOT NULL,
       CONSTRAINT "votes_pkey" PRIMARY KEY ("id"),
       CONSTRAINT "votes_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE,
       CONSTRAINT "votes_post_id_fkey" FOREIGN KEY ("post_id") REFERENCES "public"."posts"("id") ON DELETE CASCADE,
       CONSTRAINT "votes_comment_id_fkey" FOREIGN KEY ("comment_id") REFERENCES "public"."comments"("id") ON DELETE CASCADE
   );
   ```

STEP 4: ENABLE ROW LEVEL SECURITY
==================================
After creating each table, enable RLS:

```sql
ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."posts" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."comments" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."votes" ENABLE ROW LEVEL SECURITY;
```

STEP 5: CREATE BASIC POLICIES
=============================
Create simple policies that allow basic functionality:

```sql
-- Users can view all users
CREATE POLICY "Users can view all users" ON "public"."users" FOR SELECT TO authenticated USING (true);

-- Users can insert own profile
CREATE POLICY "Users can insert own profile" ON "public"."users" FOR INSERT TO authenticated WITH CHECK (auth.uid() = id);

-- Users can view all posts
CREATE POLICY "Users can view all posts" ON "public"."posts" FOR SELECT TO authenticated USING (true);

-- Users can create posts
CREATE POLICY "Users can create posts" ON "public"."posts" FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);

-- Users can view all comments
CREATE POLICY "Users can view all comments" ON "public"."comments" FOR SELECT TO authenticated USING (true);

-- Users can create comments
CREATE POLICY "Users can create comments" ON "public"."comments" FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);

-- Users can view all votes
CREATE POLICY "Users can view all votes" ON "public"."votes" FOR SELECT TO authenticated USING (true);

-- Users can create votes
CREATE POLICY "Users can create votes" ON "public"."votes" FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);
```

STEP 6: CREATE USER TRIGGER
============================
This is essential for user registration:

```sql
CREATE OR REPLACE FUNCTION "public"."handle_new_user"()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO "public"."users" (id, email, name)
    VALUES (NEW.id, NEW.email, COALESCE(NEW.raw_user_meta_data->>'name', split_part(NEW.email, '@', 1)));
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER "createAuthUser"
    AFTER INSERT ON "auth"."users"
    FOR EACH ROW EXECUTE PROCEDURE "public"."handle_new_user"();
```

STEP 7: TEST BASIC FUNCTIONALITY
================================
1. Go to your app
2. Try to sign up with a new email
3. Check if a user record is created in the users table
4. Try to create a post
5. Check if the post appears in the posts table

=====================================================
WHAT TO DO IF YOU STILL GET ERRORS
=====================================================

1. COPY THE EXACT ERROR MESSAGE
2. Note which step failed
3. Check if the table was created successfully
4. Verify your Supabase project is active

=====================================================
ALTERNATIVE: USE SUPABASE DASHBOARD
====================================

If SQL continues to fail:

1. Go to "Table Editor" in Supabase
2. Click "Create a new table"
3. Create tables manually with the structure above
4. This bypasses SQL syntax issues

=====================================================
CURRENT PRIORITY
=====================================================

RIGHT NOW, focus on:
1. Creating the 4 basic tables (users, posts, comments, votes)
2. Enabling RLS on each table
3. Creating basic policies
4. Setting up the user trigger
5. Testing user registration

Once these basics work, we can add the advanced features.

=====================================================
NEED HELP?
=====================================================

If you're still stuck:
1. Tell me exactly which step failed
2. Copy the exact error message
3. Tell me your PostgreSQL version
4. I'll create a simpler, working solution

=====================================================
